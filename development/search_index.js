var documenterSearchIndex = {"docs":
[{"location":"references/strings/#Strings","page":"Strings","title":"Strings","text":"","category":"section"},{"location":"references/strings/","page":"Strings","title":"Strings","text":"This reference documents formatting Julia values into Typst source text.","category":"page"},{"location":"references/strings/#Typstry.TypstStrings.TypstString","page":"Strings","title":"Typstry.TypstStrings.TypstString","text":"TypstString <: AbstractString\nTypstString(::TypstContext, ::Any)\nTypstString(::Any; context...)\n\nFormat the value as a Typst formatted string.\n\nThe TypstContext is combined with additional context and passed to show_typst.\n\nInterface\n\nThis type implements the String interface. However, the interface is undocumented, which may result in unexpected behavior.\n\nIOBuffer(::TypstString)\ncodeunit(::TypstString, ::Integer)\ncodeunit(::TypstString)\nisvalid(::TypstString, ::Integer)\niterate(::TypstString, ::Integer)\niterate(::TypstString)\nncodeunits(::TypstString)\npointer(::TypstString)\nrepr(::MIME\"text/typst ::TypstString; context = nothing)\nrepr(::MIME, ::TypstString; context = nothing)\nThis method patches incorrect output from the assumption in repr that   the parameter is already in the requested MIME type when the MIME   type satisfies istextmime and the parameter is an AbstractString.\nshow_typst(::IO, ::TypstContext, ::TypstString)\nshow(::IO, ::MIME\"text/typst\", ::TypstString)\nAccepts a IOContext(::IO, ::TypstContext).\nshow(::IO, ::Union{MIME\"application/pdf\", MIME\"image/png\", MIME\"image/svg+xml\"}, ::TypstString)\nAccepts a IOContext(::IO, ::TypstContext).\nSupports the julia_mono typeface.\nThe generated Typst source text contains the context's preamble and the formatted value.\nshow(::IO, ::TypstString)\nPrints in @typst_str format if each character satisfies isprint.   Otherwise, print in TypstString format.\n\nExamples\n\njulia> TypstString(1)\ntypst\"$1$\"\n\njulia> TypstString(TypstContext(; mode = math), π)\ntypst\"π\"\n\njulia> TypstString(1 + 2im; mode = math)\ntypst\"(1 + 2i)\"\n\n\n\n\n\n","category":"type"},{"location":"references/strings/#Typstry.TypstTexts.TypstText","page":"Strings","title":"Typstry.TypstTexts.TypstText","text":"TypstText{T}\nTypstText(::Any)\n\nA wrapper whose show_typst method uses print on the wrapped value.\n\nInterface\n\nrepr(::MIME\"text/typst ::TypstText; context = nothing)\nshow_typst(::IO, ::TypstContext, ::TypstText)\nshow(::IO, ::MIME\"text/typst\", ::TypstText)\nAccepts IOContext(::IO, :typst_context => ::TypstContext)\nshow(::IO, ::Union{MIME\"application/pdf\", MIME\"image/png\", MIME\"image/svg+xml\"}, ::TypstText)\nAccepts IOContext(::IO, ::TypstContext)\nUses the preamble in context\nSupports the julia_mono typeface\n\nExamples\n\njulia> tt = TypstText('a')\nTypstText{Char}('a')\n\njulia> show_typst(tt)\na\n\n\n\n\n\n","category":"type"},{"location":"references/strings/#Typstry.Typsts.Typst","page":"Strings","title":"Typstry.Typsts.Typst","text":"Typst{T}\nTypst(::T)\n\nA wrapper used to pass values to show, whose show_typst method formats the wrapped value.\n\nInterface\n\nrepr(::MIME\"text/typst ::Typst; context = nothing)\nshow_typst(::IO, ::TypstContext, ::Typst)\nshow(::IO, ::MIME\"text/typst\", ::Typst)\nAccepts IOContext(::IO, :typst_context => ::TypstContext)\nshow(::IO, ::Union{MIME\"application/pdf\", MIME\"image/png\", MIME\"image/svg+xml\"}, ::Typst)\nAccepts IOContext(::IO, ::TypstContext)\nUses the preamble in context\nSupports the julia_mono typeface\n\nExamples\n\njulia> t = Typst(1)\nTypst{Int64}(1)\n\njulia> show(stdout, \"text/typst\", t)\n$1$\n\n\n\n\n\n","category":"type"},{"location":"references/strings/#Typstry.TypstStrings.@typst_str","page":"Strings","title":"Typstry.TypstStrings.@typst_str","text":"@typst_str(\"\")\ntypst\"\"\n\nConstruct a TypstString.\n\nControl characters are escaped, except double quotation marks and backslashes in the same manner as @raw_str. Values may be interpolated by calling the TypstString constructor, except using a backslash instead of the type name. Interpolation syntax may be escaped in the same manner as quotation marks.\n\ntip: Tip\nPrint directly to an IO using show_typst.See also the performance tip to Avoid string interpolation for I/O.\n\nExamples\n\njulia> x = 1;\n\njulia> typst\"$ \\(x; mode = math) / \\(x + 1; mode = math) $\"\ntypst\"$ 1 / 2 $\"\n\njulia> typst\"\\(x//2)\"\ntypst\"$1 / 2$\"\n\njulia> typst\"\\(x // 2; mode = math)\"\ntypst\"(1 / 2)\"\n\njulia> typst\"\\\\(x)\"\ntypst\"\\\\(x)\"\n\n\n\n\n\n","category":"macro"},{"location":"references/strings/#Typstry.Modes.Mode","page":"Strings","title":"Typstry.Modes.Mode","text":"Mode\n\nAn Enumerated type used to specify that the current Typst syntactical context is code, markup, or math.\n\nExamples\n\njulia> Mode\nEnum Mode:\ncode = 0\nmarkup = 1\nmath = 2\n\n\n\n\n\n","category":"type"},{"location":"references/strings/#Typstry.Modes.code","page":"Strings","title":"Typstry.Modes.code","text":"code\n\nA Typst syntactical Mode prefixed by the number sign.\n\nExamples\n\njulia> code\ncode::Mode = 0\n\n\n\n\n\n","category":"constant"},{"location":"references/strings/#Typstry.Modes.markup","page":"Strings","title":"Typstry.Modes.markup","text":"markup\n\nA Typst syntactical Mode at the top-level of source text and enclosed within square brackets.\n\njulia> markup\nmarkup::Mode = 1\n\n\n\n\n\n","category":"constant"},{"location":"references/strings/#Typstry.Modes.math","page":"Strings","title":"Typstry.Modes.math","text":"math\n\nA Typst syntactical Mode enclosed within dollar signs.\n\njulia> math\nmath::Mode = 2\n\n\n\n\n\n","category":"constant"},{"location":"references/strings/#Typstry.show_typst","page":"Strings","title":"Typstry.show_typst","text":"show_typst(::IO, ::TypstContext, ::Any)\nshow_typst(::IO, ::Any; context...)\nshow_typst(::TypstContext, ::Any)\nshow_typst(::Any; context...)\n\nPrint in Typst format with Julia settings and Typst parameters provided by the TypstContext.\n\nImplement the three-parameter form of this function for a custom type to specify its Typst formatting. A setting is a value used in Julia, whose type varies across settings. A parameter is passed directly to a Typst function and must be a TypstString with the same name as in Typst, except that dashes are replaced with underscores. Some settings, such as block, correspond with a parameter but may also be used in Julia.\n\nSee also the Typst Formatting Examples.\n\ntip: Tip\nPlease create an issue or pull-request to implement new methods.\n\n\n\n\n\n","category":"function"},{"location":"references/commands/#Commands","page":"Commands","title":"Commands","text":"","category":"section"},{"location":"references/commands/","page":"Commands","title":"Commands","text":"This reference documents how to interact with the Typst compiler.","category":"page"},{"location":"references/commands/#Typstry.Commands.TypstCommandErrors.TypstCommandError","page":"Commands","title":"Typstry.Commands.TypstCommandErrors.TypstCommandError","text":"TypstCommandError <: Exception\n\nAn Exception indicating a Typst command-line interface error from running a TypstCommand.\n\n\n\n\n\n","category":"type"},{"location":"references/commands/#Typstry.Commands.TypstCommands.TypstCommand","page":"Commands","title":"Typstry.Commands.TypstCommands.TypstCommand","text":"TypstCommand(::AbstractVector{<:AbstractString})\nTypstCommand(::TypstCommand; kwargs...)\n\nThe Typst compiler and its parameters.\n\nKeyword parameters have the same semantics as for a Cmd.\n\nInterface\n\nThis type implements the Cmd interface. However, the interface is undocumented, which may result in unexpected behavior.\n\n==(::TypstCommand, ::TypstCommand)\nCmd(::TypstCommand; parameters...)\naddenv(::TypstCommand, env...; inherit::Bool = true)\nCan be used with julia_mono.\ndetach(::TypstCommand)\neltype(::Type{TypstCommand})\nfirstindex(::TypstCommand)\ngetindex(::TypstCommand, i)\nhash(::TypstCommand, ::UInt)\nignorestatus(::TypstCommand)\nDo not throw a TypstCommandError if the Typst compiler throws an error.   Errors thrown by the Typst compiler are printed to stderr regardless.\niterate(::TypstCommand, i)\niterate(::TypstCommand)\nkeys(::TypstCommand)\nlastindex(::TypstCommand)\nlength(::TypstCommand)\nread(::TypstCommand, ::Type{String})\nErrors thrown by the Typst compiler will be printed to stderr.   Then, a Julia TypstCommandError will be   thrown unless the ignorestatus flag is set.\nread(::TypstCommand)\nErrors thrown by the Typst compiler will be printed to stderr.   Then, a Julia TypstCommandError will be   thrown unless the ignorestatus flag is set.\nrun(::TypstCommand, args...; wait::Bool = true)\nErrors thrown by the Typst compiler will be printed to stderr.   Then, a Julia TypstCommandError will be   thrown unless the ignorestatus flag is set.\nsetcpuaffinity(::TypstCommand, cpus)\nsetenv(::TypstString, env...; kwargs...)\nCan be used with julia_mono.\nshow(::IO, ::MIME\"text/plain\", ::TypstCommand)\n\nExamples\n\njulia> help = TypstCommand([\"help\"])\ntypst`help`\n\njulia> TypstCommand(help; ignorestatus = true)\ntypst`help`\n\n\n\n\n\n","category":"type"},{"location":"references/commands/#Typstry.Commands.TypstCommands.@typst_cmd","page":"Commands","title":"Typstry.Commands.TypstCommands.@typst_cmd","text":"@typst_cmd(\"\")\ntypst``\n\nConstruct a TypstCommand where each parameter is separated by a space.\n\nThis does not yet support interpolation; use the constructor instead.\n\nExamples\n\njulia> typst`help`\ntypst`help`\n\njulia> typst`compile input.typ output.typ`\ntypst`compile input.typ output.typ`\n\n\n\n\n\n","category":"macro"},{"location":"references/commands/#Typstry.Commands.julia_mono","page":"Commands","title":"Typstry.Commands.julia_mono","text":"julia_mono\n\nA constant String file path to the JuliaMono typeface.\n\nThis typeface is available when using one of the following approaches:\n\nTypstCommand([\"compile\", \"input.typ\", \"output.pdf\", \"--font-path=\" * julia_mono])\naddenv(::TypstCommand, \"TYPST_FONT_PATHS\" => julia_mono)\nsetenv(::TypstCommand, \"TYPST_FONT_PATHS\" => julia_mono)\nENV[\"TYPST_FONT_PATHS\"] = julia_mono\n\nand when compiling documents with the following methods:\n\nrender\ntypst\nshow with the application/pdf, image/png, and image/svg+xml   MIME types and a TypstString, TypstText, and Typst value\n\nSee also TypstCommand.\n\n\n\n\n\n","category":"constant"},{"location":"references/commands/#Typstry.Commands.typst","page":"Commands","title":"Typstry.Commands.typst","text":"typst(::AbstractString; catch_interrupt::Bool = true, ignorestatus::Bool = true)\n\nConvenience function intended for interactive use, emulating the typst command line interface.\n\nIf the \"TYPST_FONT_PATHS\" environment variable is not set, it is temporarily set to julia_mono.\n\nwarning: Warning\nIt strictly splits on spaces and does not provide any shell-style escape mechanism, so it will not work if there are, e.g., filenames with spaces.\n\nParameters\n\ncatch_interrupt::Bool = true\n[CTRL]+[C] quietly quits the command.\nignorestatus::Bool = true\nWhether to throw a TypstCommandError if the command errors.\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"references/internals/","page":"Internals","title":"Internals","text":"This reference documents non-public utilities.","category":"page"},{"location":"references/internals/","page":"Internals","title":"Internals","text":"info: Info\nA Dates.jl package extension would currently print warnings during precompilation. See also the Julia issue #52511","category":"page"},{"location":"references/internals/#Typstry.examples","page":"Internals","title":"Typstry.examples","text":"examples\n\nA constant Vector of Julia values and their corresponding Types implemented for show_typst.\n\n\n\n\n\n","category":"constant"},{"location":"references/internals/#Contexts","page":"Internals","title":"Contexts","text":"","category":"section"},{"location":"references/internals/#Typstry.default_context","page":"Internals","title":"Typstry.default_context","text":"default_context\n\n\n\n\n\n","category":"constant"},{"location":"references/internals/#Utilities","page":"Internals","title":"Utilities","text":"","category":"section"},{"location":"references/internals/#Typstry.compile_workload","page":"Internals","title":"Typstry.compile_workload","text":"compile_workload(examples)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.enclose","page":"Internals","title":"Typstry.enclose","text":"enclose(f, io, x, left, right = reverse(left); kwargs...)\n\nCall f(io, x; kwargs...) between printing left and right, respectfully.\n\nExamples\n\njulia> Typstry.enclose((io, i; x) -> print(io, i, x), stdout, 1, \"\\$ \"; x = \"x\")\n$ 1x $\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.join_with","page":"Internals","title":"Typstry.join_with","text":"join_with(f, io, xs, delimeter; kwargs...)\n\nSimilar to join, except printing with f(io, x; kwargs...).\n\nExamples\n\njulia> Typstry.join_with((io, i; x) -> print(io, -i, x), stdout, 1:4, \", \"; x = \"x\")\n-1x, -2x, -3x, -4x\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.unwrap","page":"Internals","title":"Typstry.unwrap","text":"unwrap(x, key::Symbol, default)\nunwrap(x, type::Type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Strings","page":"Internals","title":"Strings","text":"","category":"section"},{"location":"references/internals/#Typstry.code_mode","page":"Internals","title":"Typstry.code_mode","text":"code_mode(io, tc)\n\nPrint the number sign, unless mode(tc) == code.\n\nSee also Mode and mode.\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.date_time","page":"Internals","title":"Typstry.date_time","text":"date_time(::Union{Dates.Date, Dates.Time, Dates.DateTime})\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.dates","page":"Internals","title":"Typstry.dates","text":"dates(::Union{Dates.Date, Dates.DateTime, Dates.Period, Dates.Time})\n\nExamples\n\njulia> Typstry.dates(Dates.Date(1))\n(\"datetime\", (:year, :month, :day), (1, 1, 1))\n\njulia> Typstry.dates(Dates.Day(1))\n(\"duration\", (:days,), (TypstText{String}(\"1\"),))\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.duration","page":"Internals","title":"Typstry.duration","text":"duration(::Dates.Period)\n\nExamples\n\njulia> Typstry.duration(Dates.Day(1))\n:days\n\njulia> Typstry.duration(Dates.Hour(1))\n:hours\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.escape","page":"Internals","title":"Typstry.escape","text":"escape(io, n)\n\nPrint \\ to io n times.\n\nExamples\n\njulia> Typstry.escape(stdout, 2)\n\\\\\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.format","page":"Internals","title":"Typstry.format","text":"format(::Union{MIME\"application/pdf\", MIME\"image/png\", MIME\"image/svg+xml\"})\n\nReturn the image format acronym corresponding to the given MIME.\n\nExamples\n\njulia> Typstry.format(MIME\"application/pdf\"())\n\"pdf\"\n\njulia> Typstry.format(MIME\"image/png\"())\n\"png\"\n\njulia> Typstry.format(MIME\"image/svg+xml\"())\n\"svg\"\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.indent","page":"Internals","title":"Typstry.indent","text":"indent(tc)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.math_mode","page":"Internals","title":"Typstry.math_mode","text":"math_mode(f, io, tc, x; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.math_pad","page":"Internals","title":"Typstry.math_pad","text":"math_pad(tc)\n\nReturn \"\", \"\\$\", or \"\\$ \" depending on the block and mode settings.\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.show_parameters","page":"Internals","title":"Typstry.show_parameters","text":"show_parameters(io, tc, f, keys, final)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.show_raw","page":"Internals","title":"Typstry.show_raw","text":"show_raw(::IO, ::TypstContext, ::MIME, ::Symbol, x)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.backticks","page":"Internals","title":"Typstry.backticks","text":"backticks(tc, type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.block","page":"Internals","title":"Typstry.block","text":"block(tc, type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.depth","page":"Internals","title":"Typstry.depth","text":"depth(tc, type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.io","page":"Internals","title":"Typstry.io","text":"io(tc, type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.mode","page":"Internals","title":"Typstry.mode","text":"mode(tc, type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.parenthesize","page":"Internals","title":"Typstry.parenthesize","text":"parenthesize(tc, type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.preamble","page":"Internals","title":"Typstry.preamble","text":"preamble(tc, type, key)\n\n\n\n\n\n","category":"function"},{"location":"references/internals/#Typstry.tab_size","page":"Internals","title":"Typstry.tab_size","text":"tab_size(tc, type, key)\n\n\n\n\n\n","category":"function"},{"location":"guides/the_julia_to_typst_interface/#The-Julia-to-Typst-Interface","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"This guide illustrates how to implement Typst formatting for custom types.","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Setup","page":"The Julia to Typst Interface","title":"Setup","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> import Base: show\n\njulia> import Typstry: TypstContext, show_typst\n\njulia> using Typstry","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Implementation","page":"The Julia to Typst Interface","title":"Implementation","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Consider this custom type.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> struct Hi end","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Implement a show_typst method to specify its Typst formatting. Remember to Annotate values taken from untyped locations.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show_typst(io::IO, tc::TypstContext, ::Hi) = print(\n           io, \"Hi\", '!' ^ tc[:excitement]::Int\n       );","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Although custom formatting may be handled in show_typst with get(::TypstContext, ::Symbol, default), this may be repetitive when specifying defaults for multiple methods. There is also no way to tell if the value has been specified by the user or if it is a default. Instead, implement a custom TypstContext which overrides default, but not user specifications.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> TypstContext(::Hi) = TypstContext(; excitement = 0);","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Those two methods are a complete implementation of the Julia to Typst interface. The following method is optional, but enables interoperability with packages that do not know about Typstry.jl.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show(io::IO, m::Union{\n           MIME\"application/pdf\",\n           MIME\"image/png\",\n           MIME\"image/svg+xml\",\n           MIME\"text/typst\"\n       }, h::Hi) = show(io, m, Typst(h));","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Now, Hi is fully supported by Typstry.jl and implements the show interface.","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> h = Hi();\n\njulia> show_typst(h)\nHi\n\njulia> TypstString(h; excitement = 1)\ntypst\"Hi!\"\n\njulia> typst\"\\(h; excitement = 2)\"\ntypst\"Hi!!\"\n\njulia> show(IOContext(stdout, TypstContext(; excitement = 3)), \"text/typst\", h)\nHi!!!","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Guidelines","page":"The Julia to Typst Interface","title":"Guidelines","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"While implementing the interface only requires two methods, it may be more challenging to determine how a Julia value should be represented in a Typst source file and its corresponding compiled document. Julia and Typst are distinct languages that differ in both syntax and semantics, so there may be multiple meaningful formats to choose from.","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Make-the-obvious-choice,-if-available","page":"The Julia to Typst Interface","title":"Make the obvious choice, if available","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"There is a clear correspondence between these Julia and Typst values","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show_typst(1)\n$1$\n\njulia> show_typst(nothing)\n#none\n\njulia> show_typst(r\"[a-z]\")\n#regex(\"[a-z]\")","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Consider-both-the-Typst-source-text-and-compiled-document-formatting","page":"The Julia to Typst Interface","title":"Consider both the Typst source text and compiled document formatting","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"A Docs.Text is documented to \"render [its value] as plain text\", and therefore corresponds to text in a rendered Typst document\nA TypstString represents Typst source text, and is printed directly","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show_typst(text\"[\\\"a\\\"]\")\n#\"[\\\"a\\\"]\"\n\njulia> show_typst(typst\"[\\\"a\\\"]\")\n[\"a\"]","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Try-to-generate-valid-Typst-source-text","page":"The Julia to Typst Interface","title":"Try to generate valid Typst source text","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"A TypstString represents Typst source text, which may be invalid\nA UnitRange{Int} is formatted differently for each Mode, but is always valid","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show_typst(1:4)\n#range(1, 5)\n\njulia> show_typst(1:4; mode = code)\nrange(1, 5)","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Test-for-edge-cases","page":"The Julia to Typst Interface","title":"Test for edge cases","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"$1 / 2$ is not ambiguous in markup mode\n1 / 2 may be ambiguous in math mode expressions, and should be parenthesized","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show_typst(1 // 2)\n$1 / 2$\n\njulia> show_typst(1 // 2; mode = math)\n(1 / 2)","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Format-values-in-containers-using-show_typst","page":"The Julia to Typst Interface","title":"Format values in containers using show_typst","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Values may require their TypstContext\nThe AbstractVector method\nEncloses source text in dollar signs, so it changes its Mode to math\nFormats its elements with an indent, so it increments its depth","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show_typst([true, Any[1, 1.2]])\n$vec(\n  #true, vec(\n    1, 1.2\n  )\n)$","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Check-parametric-and-abstract-types","page":"The Julia to Typst Interface","title":"Check parametric and abstract types","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"Similar Julia types may not be representable in the same Typst format","category":"page"},{"location":"guides/the_julia_to_typst_interface/","page":"The Julia to Typst Interface","title":"The Julia to Typst Interface","text":"julia> show_typst(0:2:6)\n#range(0, 7, step: 2)\n\njulia> show_typst(0:2.0:6)\n$vec(\n  0.0, 2.0, 4.0, 6.0\n)$","category":"page"},{"location":"guides/the_julia_to_typst_interface/#Prefer-to-perform-computation-in-Julia,-rather-than-Typst-code-mode","page":"The Julia to Typst Interface","title":"Prefer to perform computation in Julia, rather than Typst code mode","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/#Choose-the-most-semantically-rich-representation","page":"The Julia to Typst Interface","title":"Choose the most semantically rich representation","text":"","category":"section"},{"location":"guides/the_julia_to_typst_interface/#Each-method-of-show_typst-should-correspond-to-the-same-rendering-in-a-compiled-document","page":"The Julia to Typst Interface","title":"Each method of show_typst should correspond to the same rendering in a compiled document","text":"","category":"section"},{"location":"references/package_extensions/#Package-Extensions","page":"Package Extensions","title":"Package Extensions","text":"","category":"section"},{"location":"references/package_extensions/","page":"Package Extensions","title":"Package Extensions","text":"This reference documents the lazily-loaded implementations of show_typst for types defined in external packages.","category":"page"},{"location":"references/package_extensions/#LaTeXStrings.jl","page":"Package Extensions","title":"LaTeXStrings.jl","text":"","category":"section"},{"location":"references/package_extensions/","page":"Package Extensions","title":"Package Extensions","text":"julia> using LaTeXStrings, Typstry\n\njulia> show_typst(L\"$a$\")\n```latex $a$```","category":"page"},{"location":"references/package_extensions/#Markdown.jl","page":"Package Extensions","title":"Markdown.jl","text":"","category":"section"},{"location":"references/package_extensions/","page":"Package Extensions","title":"Package Extensions","text":"julia> using Markdown, Typstry\n\njulia> show_typst(md\"# A\")\n```markdown # A```","category":"page"},{"location":"guides/package_interoperability/#package_interoperability","page":"Package Interoperability","title":"Package Interoperability","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"This guide illustrates how to use Typstry.jl in compatible notebooks and packages.","category":"page"},{"location":"guides/package_interoperability/#Notebooks","page":"Package Interoperability","title":"Notebooks","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"IJulia.jl, Pluto.jl, and QuartoNotebookRunner.jl each display TypstStrings, TypstTexts, and Typsts using show with the application/pdf, image/png, and image/svg+xml MIME types.","category":"page"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"tip: Tip\nSet mappings in context to customize the default formatting in these environments.","category":"page"},{"location":"guides/package_interoperability/#Typst-Packages","page":"Package Interoperability","title":"Typst Packages","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"Compiling a document which imports a Typst package can be achieved in exactly the same manner as compiling a standard Typst source file with the command-line interface. For example:","category":"page"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"typst\"#import \\\"@namespace/name:version\\\"\"","category":"page"},{"location":"guides/package_interoperability/#Julia-Packages","page":"Package Interoperability","title":"Julia Packages","text":"","category":"section"},{"location":"guides/package_interoperability/#Labelyst.jl","page":"Package Interoperability","title":"Labelyst.jl","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"This package is a dependent of Typstry.jl.","category":"page"},{"location":"guides/package_interoperability/#Literate.jl","page":"Package Interoperability","title":"Literate.jl","text":"","category":"section"},{"location":"guides/package_interoperability/#Luxor.jl","page":"Package Interoperability","title":"Luxor.jl","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"This package is a weak dependent of Typstry.jl.","category":"page"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"julia> using Luxor: @svg, O, text\n\njulia> using Typstry: @typst_str\n\njulia> @svg text(typst\\\"Hi cormullion!\\\", O)","category":"page"},{"location":"guides/package_interoperability/#MakieTeX.jl","page":"Package Interoperability","title":"MakieTeX.jl","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"This package is a dependent of Typstry.jl.","category":"page"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"note: Note\nThis package re-exports @typst_str and TypstString.","category":"page"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"using Markdown: Markdown\nMarkdown.parse(\"\"\"```julia-repl\njulia> using CairoMakie, MakieTeX\n\njulia> f = Figure(; size = (100, 100))\n\njulia> LTeX(f[1, 1], TypstDocument(typst\"Hi Anshul Singhvi!\"))\n\njulia> save(\"makie_tex.svg\", f)\n```\"\"\")","category":"page"},{"location":"guides/package_interoperability/#RegressionTables.jl","page":"Package Interoperability","title":"RegressionTables.jl","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"This package is a weak dependent of Typstry.jl.","category":"page"},{"location":"guides/package_interoperability/#TypstJlyfish.jl","page":"Package Interoperability","title":"TypstJlyfish.jl","text":"","category":"section"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"This package is interoperable with Typstry.jl.","category":"page"},{"location":"guides/package_interoperability/","page":"Package Interoperability","title":"Package Interoperability","text":"import Markdown\nMarkdown.parse(\"\"\"\n```typst\n#import \"@preview/jlyfish:0.1.0\": *\n#read-julia-output(json(\"typst_jlyfish.json\"))\n#jl-pkg(\"Typstry\")\n#jl(`using Typstry; typst\"Hi Andreas Kröpelin!\"`)\n```\n```julia-repl\njulia> using TypstJlyfish, Typstry\n\njulia> TypstJlyfish.compile(\"typst_jlyfish.typ\"; evaluation_file = \"typst_jlyfish.json\")\n```\n\"\"\")","category":"page"},{"location":"references/contexts/#Contexts","page":"Contexts","title":"Contexts","text":"","category":"section"},{"location":"references/contexts/","page":"Contexts","title":"Contexts","text":"This reference documents how to specify formatting data.","category":"page"},{"location":"references/contexts/#Typstry.ContextErrors.ContextError","page":"Contexts","title":"Typstry.ContextErrors.ContextError","text":"ContextError <: Exception\nContextError(::Type, ::Type, ::Symbol)\n\nAn Exception indicating that a context key returned a value of an incorrect type.\n\nInterface\n\nImplements the Exception interface.\n\nshowerror(::IO, ::ContextError)\nshow(::IO, ::MIME\"text/plain\", ::ContextError)\n\nExamples\n\njulia> ContextError(Mode, String, :mode)\nContextError(Mode, String, :mode)\n\n\n\n\n\n","category":"type"},{"location":"references/contexts/#Typstry.DefaultIOs.DefaultIO","page":"Contexts","title":"Typstry.DefaultIOs.DefaultIO","text":"DefaultIO\nDefaultIO()\n\nA type used to initialize the default io in context.\n\ninfo: Info\nThis is a workaround for stdout being invalid when assigned to a global variable.\n\nExamples\n\njulia> io = context[:io]::DefaultIO\n(() -> IOContext(stdout, :compact => true))::DefaultIO\n\njulia> io == DefaultIO()() == IOContext(stdout, :compact => true)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"references/contexts/#Typstry.TypstContext","page":"Contexts","title":"Typstry.TypstContext","text":"TypstContext <: AbstractDict{Symbol, Any}\nTypstContext(::Any)\nTypstContext(; kwargs...)\n\nProvide formatting data for show_typst.\n\nImplement a method of this constructor for a custom type to specify its custom settings and parameters.\n\nCalls to show_typst from the following methods:\n\nTypstString\nrender\nshow_typst(::IO, ::TypstContext, x)\nshow with the application/pdf, image/png, image/svg+xml, and text/typst   MIME types and a TypstString, TypstText, and Typst value\n\nspecify the TypstContext by combining the following contexts:\n\nThe context given by a TypstContext or keyword parameters, which are mutually exclusive\nThe context given by IOContext(::IO, ::TypstContext)\nThe context implicitly set when calling show_typst within show_typst\nThe type's default context, specified by implementing the TypstContext constructor\nThe global default context\n\nDuplicate keys are handled such that each context is prioritized in order as listed. In other words, keyword parameters and TypstContext parameters have the highest priority while the default context has the lowest priority.\n\nInterfaces\n\nThis type implements the dictionary and iteration interfaces. However, it does not support removing mappings except through reset_context.\n\nIOContext(::IO, ::TypstContext)\nEquivalent to IOContext(::IO, :typst_context => ::TypstContext)\ncopy(::TypstContext)\neltype(::TypstContext)\ngetkey(::TypstContext, ::Any, ::Any)\nget(::TypstContext, ::Any, ::Any)\nget(::Union{Function, Type}, ::TypstContext, ::Any)\niterate(::TypstContext, state)\niterate(::TypstContext)\nlength(::TypstContext)\nmergewith(::Any, ::TypstContext, ::AbstractDict...)\nmerge!(::TypstContext, ::AbstractDict...)\nmerge(::TypstContext, ::AbstractDict...)\nsetindex!(::TypstContext, ::Any, ::Any)\nshow(::IO, ::TypstContext)\nsizehint!(::TypstContext, ::Any; kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"references/contexts/#Typstry.context","page":"Contexts","title":"Typstry.context","text":"context\n\nA constant TypstContext used to provide default formatting data when calling show_typst.\n\nSee also reset_context.\n\ntip: Tip\nSet mappings in this dictionary to customize the default formatting in other packages and environments.\n\nwarning: Warning\nThis should only be mutated by users. Mutating this in a package may result in conflicts.\n\nSetting Type Description\nbackticks Int The number of backticks to enclose raw text markup, which may be increased to disambiguiate nested raw text.\nblock Bool When mode = math, specifies whether the enclosing dollar signs are padded with a space to render the element inline or its own block.\ncontext TypstContext This is set implicitly by combining the context given by a TypstContext or keyword parameters with that given by an IO. It is used when calling show_typst from within show_typst. For example, formatting values in containers or changing the type of the input. This is necessary to construct a new combined context with the nested type-level default values, rather than the root type-level default values.\ndepth Int The current level of nesting within container types to specify the degree of indentation by repeating the tab_size.\nio DefaultIO A function with the signature io()::IO, which is used by show_typst when an IO is not otherwise specified. This is implemented as a function to avoid initialization errors.\nmode Mode The current Typst syntactical context where code follows the number sign, markup is at the top-level and enclosed in square brackets, and math is enclosed in dollar signs.\nparenthesize Bool Whether to enclose some mathematical elements in parentheses to specify their operator precedence and avoid ambiguity.\npreamble TypstString Used at the beginning of Typst source files generated by render and some show methods.\ntab_size Int The number of spaces used by some elements with multi-line Typst formatting, which is repeated for each level of depth\n\nExamples\n\njulia> context\nTypstContext with 8 entries:\n  :mode         => markup\n  :parenthesize => true\n  :block        => false\n  :preamble     => TypstString(TypstText(\"#set page(margin: 1em, height: auto, …\n  :io           => (() -> IOContext(stdout, :compact => true))::DefaultIO\n  :tab_size     => 2\n  :backticks    => 3\n  :depth        => 0\n\n\n\n\n\n","category":"constant"},{"location":"references/contexts/#Typstry.reset_context","page":"Contexts","title":"Typstry.reset_context","text":"reset_context()\n\nRemove any custom mappings from the context such that it is returned to its default state.\n\nExamples\n\njulia> reset_context()\nTypstContext with 8 entries:\n  :mode         => markup\n  :parenthesize => true\n  :block        => false\n  :preamble     => TypstString(TypstText(\"#set page(margin: 1em, height: auto, …\n  :io           => (() -> IOContext(stdout, :compact => true))::DefaultIO\n  :tab_size     => 2\n  :backticks    => 3\n  :depth        => 0\n\n\n\n\n\n","category":"function"},{"location":"guides/updating_dependencies/#Updating-Dependencies","page":"Updating Dependencies","title":"Updating Dependencies","text":"","category":"section"},{"location":"guides/updating_dependencies/","page":"Updating Dependencies","title":"Updating Dependencies","text":"This guide discusses updating Typst_jll.jl, Typstry.jl, and Typstry.jl's dependent packages.","category":"page"},{"location":"guides/updating_dependencies/#Typst_jll.jl","page":"Updating Dependencies","title":"Typst_jll.jl","text":"","category":"section"},{"location":"guides/updating_dependencies/","page":"Updating Dependencies","title":"Updating Dependencies","text":"Yggrasil hosts the BinaryBuilder.jl recipes used to generate jll packages. Upon merging changes to a recipe, the corresponding jll package is updated automatically.","category":"page"},{"location":"guides/updating_dependencies/","page":"Updating Dependencies","title":"Updating Dependencies","text":"Obtain the version number and commit hash of a  Typst release\nFork Yggrasil\nUpdate the version number and commit hash in Yggdrasil/T/Typst/build_tarballs.jl","category":"page"},{"location":"guides/updating_dependencies/","page":"Updating Dependencies","title":"Updating Dependencies","text":"version = v\"0.13.1\"\nsources = [GitSource(\n    \"https://github.com/typst/typst.git\",\n    \"8dce676dcd691f75696719e0480cd619829846a9\"\n)]","category":"page"},{"location":"guides/updating_dependencies/","page":"Updating Dependencies","title":"Updating Dependencies","text":"Submit a pull request with these changes, titled [Typst] Update version to $version\nFix any build issues\nWait until the pull request is merged","category":"page"},{"location":"guides/updating_dependencies/#Typstry.jl","page":"Updating Dependencies","title":"Typstry.jl","text":"","category":"section"},{"location":"guides/updating_dependencies/","page":"Updating Dependencies","title":"Updating Dependencies","text":"Typst uses semantic versioning and currently has a major version of 0. As such, patch version updates should be available automatically in Typstry.jl but minor version updates require updating the compatibility bound of Typstjll.jl. Either submit an issue to Typstry.jl or a pull request by updating the Project.toml with the new version of Typstjll.jl. In general, Typstry.jl only supports the latest version of Typst. However, previous versions may remain compatible until there is a feature requiring an update.","category":"page"},{"location":"guides/updating_dependencies/#Interoperable-Packages","page":"Updating Dependencies","title":"Interoperable Packages","text":"","category":"section"},{"location":"guides/updating_dependencies/","page":"Updating Dependencies","title":"Updating Dependencies","text":"After a minor release of Typstry.jl, dependent packages require an update to their Typstry.jl compatibility bounds. They may also require updates for any breaking changes in Typstry.jl.","category":"page"},{"location":"tutorials/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"This tutorial demonstrates the basic features of Typstry.jl and how to use them.","category":"page"},{"location":"tutorials/getting_started/#Strings","page":"Getting Started","title":"Strings","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Print Julia values in Typst format using show with the text/typst MIME type. This formatting is also used to construct a TypstString.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> show(stdout, \"text/typst\", Typst(π))\n$π$\n\njulia> TypstString(π)\ntypst\"$π$\"","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Formatting may be configured in show using an IOContext and in TypstString using keyword parameters.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> show(IOContext(stdout, TypstContext(; mode = markup)), \"text/typst\", Typst(π))\n$π$\n\njulia> TypstString(π; mode = math)\ntypst\"π\"","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Use @typst_str to directly write Typst source text. This also supports formatted interpolation by calling the TypstString constructor.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> typst\"$ \\(π; mode = math) approx \\(Float64(π); mode = math) $\"\ntypst\"$ π approx 3.141592653589793 $\"","category":"page"},{"location":"tutorials/getting_started/#Commands","page":"Getting Started","title":"Commands","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Use the Typst command-line interface by running a TypstCommand created with its constructor or @typst_cmd.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> TypstCommand([\"help\"])\ntypst`help`\n\njulia> typst`compile input.typ output.pdf`\ntypst`compile input.typ output.pdf`","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Easily generate a Typst source file and compile it into a document using render.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> render(Any[true 1; 1.2 1 // 2]);","category":"page"},{"location":"references/render/#Render","page":"Render","title":"Render","text":"","category":"section"},{"location":"references/render/#Typstry.render","page":"Render","title":"Typstry.render","text":"render(::TypstContext, value; parameters...)\nrender(value; parameters..., context...)\n\nRender the value to a document.\n\nThis supports using the julia_mono typeface.\n\nSee also TypstContext.\n\ninfo: Info\nTypst requires the output path to contain a page number template {p} when compiling documents with multiple pages to either PNG or SVG format. In this case, use open = false to prevent an error from the Typst command-line interface. See also Typst #7182.\n\nParameters\n\ninput::AbstractString = \"input.typ\"\nWrite the preamble and formatted value to this Typst source file.\noutput::AbstractString = \"output.pdf\"\nCompile the document in the format specified by the file extension pdf, png, or svg.\nopen::Bool = true\nWhether to preview the document with the default viewer, if available.\nignorestatus::Bool = true\nWhether to throw a TypstCommandError if the command errors.\n\nExamples\n\njulia> render(Any[true 1; 1.2 1 // 2]);\n\n\n\n\n\n","category":"function"},{"location":"#Typstry.jl","page":"Typstry.jl","title":"Typstry.jl","text":"","category":"section"},{"location":"#Introduction","page":"Typstry.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Typstry.jl is the interface to convert the computational power of Julia into beautifully formatted Typst documents.","category":"page"},{"location":"#What-is-Typst?","page":"Typstry.jl","title":"What is Typst?","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Typst is an open-source and relatively new typesetting system (written in Rust 🦀🚀), designed to improve upon the performance and usability of LaTeX. See also the Typst repository and documentation for examples and how to get started.","category":"page"},{"location":"#Installation","page":"Typstry.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"julia> using Pkg: add\n\njulia> add(\"Typstry\")\n\njulia> using Typstry","category":"page"},{"location":"#Showcase","page":"Typstry.jl","title":"Showcase","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"julia> show(stdout, \"text/typst\", Typst([1 // 2 1; 1.0 [Any[1 // 2 1; 1.0 nothing]]]))\n$mat(\n  1 / 2, 1;\n  1.0, mat(\n    1 / 2, 1;\n    1.0, #none\n  )\n)$\n\njulia> TypstString(1 // 2; block = true)\ntypst\"$ 1 / 2 $\"\n\njulia> typst\"$ 1 / \\(1 + 2im; mode = math) $\"\ntypst\"$ 1 / (1 + 2i) $\"\n\njulia> TypstCommand([\"help\"])\ntypst`help`\n\njulia> typst`compile input.typ output.pdf`\ntypst`compile input.typ output.pdf`\n\njulia> render(1:4)","category":"page"},{"location":"#Features","page":"Typstry.jl","title":"Features","text":"","category":"section"},{"location":"#Strings","page":"Typstry.jl","title":"Strings","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Print Julia values in Typst format\nSpecify Julia settings and Typst parameters\nImplement formatting for custom types\nConstruct Typst strings\nInterpolate formatted values","category":"page"},{"location":"#Commands","page":"Typstry.jl","title":"Commands","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Construct Typst commands\nRender documents using the Typst compiler\nDisplay in IJulia.jl, Pluto.jl, and QuartoRunner.jl notebooks\nUse the JuliaMono typeface","category":"page"},{"location":"#Planned","page":"Typstry.jl","title":"Planned","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Default auto::Mode?\nAutomatically determine the Typst syntactic context\nUse a jll package\nImplement Typst formatting for more types\nBase\nAbstractDict\nAbstractIrrational\nAbstractSet\nEnum\nMode\nExpr\nSymbol\nPackage extensions\nStandard Library\nLinearAlgebra.jl\nDataFrames.jl\nPartial Julia to Typst transpilation\n(@typst $a * b) ==\nTypstString(:($a * b)) ==\nTypstString(TypstFunction(*, a, :b)) ==\ntypst\"$ 2b $\"","category":"page"},{"location":"#Similar-Packages","page":"Typstry.jl","title":"Similar Packages","text":"","category":"section"},{"location":"#Typst","page":"Typstry.jl","title":"Typst","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Labelyst.jl\nDependent of Typstry.jl\nLuxor.jl\nWeak dependent of Typstry.jl\nTypstGenerator.jl\nTypstJlyFish.jl\nInteroperable with Typstry.jl\nTypst_jll.jl\nDependency of Typstry.jl","category":"page"},{"location":"#Typst-and-LaTeX","page":"Typstry.jl","title":"Typst and LaTeX","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"MakieTeX.jl\nDependent of Typstry.jl\nSummaryTables.jl","category":"page"},{"location":"#LaTeX","page":"Typstry.jl","title":"LaTeX","text":"","category":"section"},{"location":"","page":"Typstry.jl","title":"Typstry.jl","text":"Latexify.jl\nLaTeXCompilers.jl\nLaTeXEntities.jl\nLaTeXStrings.jl\nLaTeXTabulars.jl\nLatexPrint.jl\nLibTeXPrintf.jl\nMathJaxRenderer.jl\nMathTeXEngine.jl\nPlutoPapers.jl\ntectonic_jll.jl","category":"page"},{"location":"guides/typst_formatting_examples/#Typst-Formatting-Examples","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"","category":"section"},{"location":"guides/typst_formatting_examples/","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"This guide illustrates Typst formatting for supported types.","category":"page"},{"location":"guides/typst_formatting_examples/","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"These Typst documents were generated from Julia using show_typst and compiled using a TypstCommand. Each row corresponds to a method of show_typst. The Settings correspond to those in a TypstContext. Note that additional settings may be used for component values, such as those in a container. The Typst columns contain the formatted value and its render. Sequential documents correspond to Package Extensions.","category":"page"},{"location":"guides/typst_formatting_examples/","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"tip: Tip\nOpen these images in a new tab or another viewer.","category":"page"},{"location":"guides/typst_formatting_examples/","page":"Typst Formatting Examples","title":"Typst Formatting Examples","text":"(Image: Typstry.jl examples) (Image: LaTeXStrings.jl examples) (Image: Markdown.jl examples)","category":"page"}]
}
